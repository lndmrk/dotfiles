# SPDX-FileCopyrightText: 2019 Emil Lundmark <emil@lndmrk.se>
# SPDX-License-Identifier: GPL-3.0-or-later
#+TITLE: lndmrk's Emacs Configuration
#+AUTHOR: Emil Lundmark

* Defaults

** User Interface

#+begin_src emacs-lisp
(use-package emacs
  :init
  (horizontal-scroll-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  :custom
  (inhibit-startup-screen t)
  (initial-scratch-message nil))
#+end_src

** Backup Files

#+begin_src emacs-lisp
(use-package emacs
  :init
  (let ((backup-directory
         (file-name-as-directory (locate-user-emacs-file "backups"))))
    (unless (file-directory-p backup-directory)
      (make-directory backup-directory t))
    (setq backup-directory-alist `((".*" . ,backup-directory)))
    (setq auto-save-file-name-transforms `((".*" ,backup-directory t)))))
#+end_src

** Custom File

#+begin_src emacs-lisp
(use-package emacs
  :custom (custom-file (locate-user-emacs-file "custom.el"))
  :init (when (file-exists-p custom-file) (load custom-file)))
#+end_src

** Key Bindings

*** Unbind Aliases

#+begin_src emacs-lisp
(use-package emacs
  :after bind-key
  :config
  (unbind-key "<C-M-down>")
  (unbind-key "<C-M-end>")
  (unbind-key "<C-M-home>")
  (unbind-key "<C-M-left>")
  (unbind-key "<C-M-right>")
  (unbind-key "<C-M-up>")
  (unbind-key "<C-backspace>")
  (unbind-key "<C-delete>")
  (unbind-key "<C-down>")
  (unbind-key "<C-end>")
  (unbind-key "<C-home>")
  (unbind-key "<C-insert>")
  (unbind-key "<C-insertchar>")
  (unbind-key "<C-left>")
  (unbind-key "<C-right>")
  (unbind-key "<C-up>")
  (unbind-key "<M-begin>")
  (unbind-key "<M-end>")
  (unbind-key "<M-home>")
  (unbind-key "<M-left>")
  (unbind-key "<M-next>")
  (unbind-key "<M-prior>")
  (unbind-key "<M-right>")
  (unbind-key "<S-delete>")
  (unbind-key "<S-insert>")
  (unbind-key "<S-insertchar>")
  (unbind-key "<begin>")
  (unbind-key "<deletechar>")
  (unbind-key "<down>")
  (unbind-key "<end>")
  (unbind-key "<home>")
  (unbind-key "<insert>")
  (unbind-key "<insertchar>")
  (unbind-key "<left>")
  (unbind-key "<next>")
  (unbind-key "<prior>")
  (unbind-key "<right>")
  (unbind-key "<up>")
  (unbind-key "C-c <left>")
  (unbind-key "C-c <right>")
  (unbind-key "C-x <C-left>")
  (unbind-key "C-x <C-right>")
  (unbind-key "C-x <left>")
  (unbind-key "C-x <right>"))
#+end_src

*** Better Defaults

#+begin_src emacs-lisp
(use-package emacs
  :after bind-key
  :config
  (unbind-key "<C-S-backspace>")
  (unbind-key "C-x C-z")
  (unbind-key "C-z")
  :bind
  ("C-S-k" . kill-whole-line)
  ("M-o" . delete-blank-lines)
  ([remap capitalize-word] . capitalize-dwim)
  ([remap delete-horizontal-space] . cycle-spacing)
  ([remap downcase-word] . downcase-dwim)
  ([remap query-replace] . query-replace-regexp)
  ([remap upcase-word] . upcase-dwim)
  ([remap zap-to-char] . zap-up-to-char))
#+end_src

** Text

#+begin_src emacs-lisp
(use-package emacs
  :custom
  (colon-double-space nil)
  (fill-column 80)
  (indent-tabs-mode nil)
  (sentence-end-double-space nil)
  (standard-indent 2)
  (tab-width standard-indent))
#+end_src

** Miscellaneous

#+begin_src emacs-lisp
(use-package emacs
  :custom
  (confirm-kill-emacs #'yes-or-no-p)
  (create-lockfiles nil)
  (delete-by-moving-to-trash t)
  (require-final-newline 'visit-save)
  (ring-bell-function 'ignore)
  (save-interprogram-paste-before-kill t)
  (uniquify-buffer-name-style 'forward)
  :config
  (column-number-mode 1)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (line-number-mode 1)
  (put 'narrow-to-region 'disabled nil)
  :hook
  (find-file . size-indication-mode))
#+end_src

* Custom Functions

** Configuration Management

#+begin_src emacs-lisp
(use-package emacs
  :config
  (defun my-config-find-file (filename)
    (interactive
     (list
      (completing-read
       "Find config file: "
       (append `(,early-init-file ,user-init-file) my-config--org-files))))
    (find-file filename))
  (defun my-config-reload ()
    (interactive)
    (load user-init-file))
  :bind
  ("C-c d f" . my-config-find-file)
  ("C-c d r" . my-config-reload))
#+end_src

** Formatting

#+begin_src emacs-lisp
(use-package emacs
  :config
  (defun my-format-buffer-or-region ()
    (interactive)
    (let ((beginning (if (use-region-p) (region-beginning) (point-min)))
          (end (if (use-region-p) (region-end) (point-max))))
      (save-mark-and-excursion
        (indent-region beginning end)
        (whitespace-cleanup-region beginning end))))
  (defun my-sort-lines ()
    (interactive)
    (let ((inhibit-field-text-motion t)
          (saved-point (point)))
      (unless (use-region-p)
        (mark-paragraph)
        (unless (eq (line-number-at-pos) (point-min))
          (forward-line 1)))
      (call-interactively 'sort-lines)
      (goto-char saved-point)))
  (defun my-sort-lines-fold-case ()
    (interactive)
    (let ((sort-fold-case t))
      (call-interactively 'my-sort-lines)))
  :bind
  ("C-c l f" . my-format-buffer-or-region)
  ("C-c l s" . my-sort-lines-fold-case)
  ("C-c l S" . my-sort-lines))
#+end_src

** Message Composing

#+begin_src emacs-lisp
(use-package emacs
  :config
  (defun my-message-compose-mode ()
    (setq fill-column 72)
    (auto-fill-mode 1)))
#+end_src

* Packages

** Built-in

*** cc-mode

#+begin_src emacs-lisp
(use-package cc-mode
  :custom (c-basic-offset standard-indent))
#+end_src

*** compile

#+begin_src emacs-lisp
(use-package compile
  :custom (compilation-scroll-output t))
#+end_src

*** dired

#+begin_src emacs-lisp
(use-package dired
  :custom
  (dired-recursive-copies 'always)
  (dired-recursive-deletes 'always)
  :config
  (defun my-dired-xdg-open-file ()
    (interactive)
    (let ((file (dired-get-filename nil t)))
      (call-process "xdg-open" nil 0 nil file)))
  :bind
  (:map dired-mode-map
        ("<C-return>" . my-dired-xdg-open-file)))
#+end_src

*** display-fill-column-indicator

#+begin_src emacs-lisp
(use-package display-fill-column-indicator
  :hook ((find-file prog-mode text-mode) . display-fill-column-indicator-mode))
#+end_src

*** display-line-numbers

#+begin_src emacs-lisp
(use-package display-line-numbers
  :custom (display-line-numbers-widen t)
  :hook (find-file . display-line-numbers-mode))
#+end_src

*** eldoc

#+begin_src emacs-lisp
(use-package eldoc
  :custom (eldoc-echo-area-use-multiline-p nil))
#+end_src

*** flyspell

#+begin_src emacs-lisp
(use-package flyspell
  :hook
  (prog-mode . flyspell-prog-mode)
  (text-mode . flyspell-mode))
#+end_src

*** hideshow

#+begin_src emacs-lisp
(use-package hideshow
  :diminish hs-minor-mode
  :hook (prog-mode . hs-minor-mode))
#+end_src

*** hl-line

#+begin_src emacs-lisp
(use-package hl-line
  :config (global-hl-line-mode 1))
#+end_src

*** js

#+begin_src emacs-lisp
(use-package js
  :custom (js-indent-level standard-indent))
#+end_src

*** paren

#+begin_src emacs-lisp
(use-package paren
  :custom (show-paren-delay 0)
  :hook (prog-mode . show-paren-mode))
#+end_src

*** python

#+begin_src emacs-lisp
(use-package python
  :custom (python-indent-offset standard-indent))
#+end_src

*** saveplace

#+begin_src emacs-lisp
(use-package saveplace
  :config (save-place-mode 1))
#+end_src

*** sh-script

#+begin_src emacs-lisp
(use-package sh-script
  :custom (sh-basic-offset standard-indent))
#+end_src

*** so-long

#+begin_src emacs-lisp
(use-package so-long
  :config (global-so-long-mode 1))
#+end_src

*** subword

#+begin_src emacs-lisp
(use-package subword
  :diminish
  :hook (prog-mode . subword-mode))
#+end_src

*** whitespace

#+begin_src emacs-lisp
(use-package whitespace
  :diminish
  :custom
  (whitespace-style '(face
                      trailing
                      lines-tail
                      empty
                      space-after-tab
                      space-before-tab
                      tab-mark))
  :hook
  ((find-file prog-mode text-mode) . whitespace-mode))
#+end_src

*** winner

#+begin_src emacs-lisp
(use-package winner
  :after bind-key
  :config
  (unbind-key "C-c <left>")
  (unbind-key "C-c <right>")
  (winner-mode 1)
  :bind
  ("C-c w n" . winner-redo)
  ("C-c w p" . winner-undo))
#+end_src

** External

*** bind-key

#+begin_src emacs-lisp
(use-package bind-key
  :ensure t
  :after use-package)
#+end_src

*** color-theme-sanityinc-tomorrow

#+begin_src emacs-lisp
(use-package color-theme-sanityinc-tomorrow
  :ensure t
  :config (load-theme 'sanityinc-tomorrow-eighties t))
#+end_src

*** company

#+begin_src emacs-lisp
(use-package company
  :ensure t
  :diminish
  :config
  (global-company-mode 1)
  :bind
  ([remap dabbrev-completion] . company-complete)
  ([remap dabbrev-expand] . company-complete-common-or-cycle))
#+end_src

*** diminish

#+begin_src emacs-lisp
(use-package diminish
  :ensure t
  :after use-package)
#+end_src

*** edit-indirect

#+begin_src emacs-lisp
(use-package edit-indirect
  :ensure t)
#+end_src

*** eglot

#+begin_src emacs-lisp
(use-package eglot
  :ensure t
  :config
  (add-to-list 'eglot-server-programs '((c++-mode c-mode) . ("clangd")))
  (defun my-eglot-ensure-python ()
    (when (my-pyvenv-p)
      (eglot-ensure)))
  :hook
  ((c++-mode c-mode) . eglot-ensure)
  (python-mode . my-eglot-ensure-python)
  :bind
  (:map eglot-mode-map
        ("C-c l a" . eglot-code-actions)
        ("C-c l d" . eglot-find-declaration)
        ("C-c l r" . eglot-rename)
        ([remap my-format-buffer-or-region] . eglot-format)))
#+end_src

*** exec-path-from-shell

Use this as a workaround until I've sorted out if shell or systemd should be the
source of truth for environment variables.

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :config
  (when (daemonp)
    (exec-path-from-shell-initialize)))
#+end_src

*** flycheck

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :custom (flycheck-disabled-checkers '(yaml-ruby))
  :config (global-flycheck-mode 1))
#+end_src

*** gtk-variant

#+begin_src emacs-lisp
(use-package gtk-variant
  :ensure t
  :hook ((server-after-make-frame window-setup) . gtk-variant-set-frame))
#+end_src

*** hl-todo

#+begin_src emacs-lisp
(use-package hl-todo
  :ensure t
  :config (global-hl-todo-mode 1))
#+end_src

*** ivy, counsel, swiper

#+begin_src emacs-lisp
(use-package ivy
  :ensure t
  :diminish
  :config (ivy-mode 1))
#+end_src

#+begin_src emacs-lisp
(use-package ivy-rich
  :ensure t
  :after (counsel ivy)
  :config (ivy-rich-mode 1))
#+end_src

#+begin_src emacs-lisp
(use-package ivy-xref
  :ensure t
  :after (ivy xref)
  :custom
  (xref-show-definitions-function 'ivy-xref-show-defs)
  (xref-show-xrefs-function 'ivy-xref-show-xrefs))
#+end_src

#+begin_src emacs-lisp
(use-package flyspell-correct-ivy
  :ensure t
  :after (flyspell ivy)
  :bind
  ([remap flyspell-auto-correct-previous-word] . flyspell-correct-wrapper)
  ([remap ispell-word] . flyspell-correct-wrapper))
#+end_src

#+begin_src emacs-lisp
(use-package counsel
  :ensure t
  :after ivy
  :diminish
  :config (counsel-mode 1))
#+end_src

#+begin_src emacs-lisp
(use-package swiper
  :ensure t
  :after ivy
  :bind
  ([remap isearch-forward] . swiper)
  ([remap isearch-backward] . swiper))
#+end_src

*** json-mode

#+begin_src emacs-lisp
(use-package json-mode
  :ensure t)
#+end_src

*** keyfreq

#+begin_src emacs-lisp
(use-package keyfreq
  :ensure t
  :custom
  (keyfreq-excluded-commands '(self-insert-command))
  (keyfreq-file (expand-file-name (locate-user-emacs-file "keyfreq")))
  :config
  (keyfreq-autosave-mode 1)
  (keyfreq-mode 1))
#+end_src

*** magit

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :custom (magit-define-global-key-bindings t)
  :hook (git-commit-mode . my-message-compose-mode))
#+end_src

*** markdown-mode

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :custom
  (markdown-command "pandoc")
  (markdown-fontify-code-blocks-natively t)
  (markdown-list-indent-width standard-indent))
#+end_src

*** org

This is already ensured to be installed in =init.el=.

#+begin_src emacs-lisp
(use-package org
  :custom
  (org-catch-invisible-edits 'error)
  (org-edit-src-content-indentation 0)
  (org-src-preserve-indentation t)
  :config
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sh" . "src sh")))
#+end_src

#+begin_src emacs-lisp
(use-package org-tempo
  :after org)
#+end_src

*** projectile

#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :bind-keymap ("C-c p" . projectile-command-map))
#+end_src

#+begin_src emacs-lisp
(use-package counsel-projectile
  :ensure t
  :after (counsel projectile)
  :custom
  (counsel-projectile-switch-project-action
   'counsel-projectile-switch-project-action-vc)
  :config
  (counsel-projectile-mode 1))
#+end_src

*** pyvenv

#+begin_src emacs-lisp
(use-package pyvenv
  :ensure t
  :init
  (defun my-pyvenv-p ()
    (bound-and-true-p pyvenv-virtual-env))
  (defun my-pyvenv-install-packages ()
    (interactive)
    (let ((packages '("pyls-black"
                      "pyls-isort"
                      "pyls-mypy"
                      "python-language-server")))
      (when (my-pyvenv-p)
        (with-current-buffer (get-buffer-create "*virtualenv-pip*")
          (apply 'call-process
                 "pip" nil t t
                 "install" "--upgrade" "--upgrade-strategy" "eager"
                 packages)))))
  (add-hook 'pyvenv-post-activate-hooks 'my-pyvenv-install-packages))
#+end_src

*** wgrep

#+begin_src emacs-lisp
(use-package wgrep
  :ensure t)
#+end_src

*** which-key

#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :diminish
  :config (which-key-mode 1))
#+end_src

*** yaml-mode

#+begin_src emacs-lisp
(use-package yaml-mode
  :ensure t
  :custom (yaml-indent-offset standard-indent))
#+end_src
