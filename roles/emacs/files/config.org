# SPDX-FileCopyrightText: 2019 Emil Lundmark <emil@lndmrk.se>
# SPDX-License-Identifier: GPL-3.0-or-later
#+TITLE: lndmrk's Emacs Configuration
#+AUTHOR: Emil Lundmark

* Sane defaults

** Backups

Place backup files in its own directory.

#+BEGIN_SRC emacs-lisp
(defconst backup-directory
  (file-name-as-directory (concat user-emacs-directory "backups")))
(make-directory backup-directory t)
(setq backup-directory-alist `((".*" . ,backup-directory)))
(setq auto-save-file-name-transforms `((".*" ,backup-directory t)))
#+END_SRC

** Buffer

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 80)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package display-line-numbers
  :hook (find-file . display-line-numbers-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package hl-line
  :config (global-hl-line-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package paren
  :custom (show-paren-delay 0)
  :hook (prog-mode . show-paren-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package whitespace
  :diminish
  :custom
  (whitespace-style '(face
                      trailing
                      lines-tail
                      empty
                      space-after-tab
                      space-before-tab
                      tab-mark))
  :hook
  ((find-file prog-mode text-mode) . whitespace-mode))
#+END_SRC

** Customizations

Don't save customizations in =init.el=.

#+BEGIN_SRC emacs-lisp
(setq custom-file (concat user-emacs-directory "custom.el"))
(when (file-exists-p custom-file) (load custom-file))
#+END_SRC

** Mail

#+BEGIN_SRC emacs-lisp
(defun my-message-compose ()
  (setq fill-column 72)
  (auto-fill-mode 1))
#+END_SRC

** Minibuffer

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Mode line

#+BEGIN_SRC emacs-lisp
(column-number-mode 1)
#+END_SRC

** Notifications

#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

** Org

#+BEGIN_SRC emacs-lisp
(setq org-src-preserve-indentation t)
#+END_SRC

** Spell checking

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :hook
  (prog-mode . flyspell-prog-mode)
  (text-mode . flyspell-mode))
#+END_SRC

* Theme

#+BEGIN_SRC emacs-lisp
(use-package color-theme-sanityinc-tomorrow
  :ensure t
  :config (load-theme 'sanityinc-tomorrow-eighties t))
#+END_SRC

* Packages

** eglot

#+BEGIN_SRC emacs-lisp
(use-package eglot
  :ensure t)
#+END_SRC

** fill-column-indicator

#+BEGIN_SRC emacs-lisp
(use-package fill-column-indicator
  :ensure t
  :hook ((find-file prog-mode text-mode) . fci-mode))
#+END_SRC

** flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :config (global-flycheck-mode 1))
#+END_SRC

** hl-todo

#+BEGIN_SRC emacs-lisp
(use-package hl-todo
  :ensure t
  :config (global-hl-todo-mode 1))
#+END_SRC

** ivy, counsel, swiper

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :diminish
  :config (ivy-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ivy-rich
  :ensure t
  :after (counsel ivy)
  :config (ivy-rich-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :after ivy
  :diminish
  :config (counsel-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :after ivy
  :bind
  ([remap isearch-forward] . swiper)
  ([remap isearch-backward] . swiper))
#+END_SRC

** json-mode

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :ensure t)
#+END_SRC

** magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :config (global-magit-file-mode 1)
  :hook (git-commit-mode . my-message-compose)
  :bind ("C-x g" . magit-status)
#+END_SRC

** markdown-mode

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :custom (markdown-command "pandoc"))
#+END_SRC

** which-key

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :diminish
  :config (which-key-mode 1))
#+END_SRC

** yaml-mode

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t)
#+END_SRC
