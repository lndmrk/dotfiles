# SPDX-FileCopyrightText: 2019 Emil Lundmark <emil@lndmrk.se>
# SPDX-License-Identifier: GPL-3.0-or-later
#+TITLE: lndmrk's Emacs Configuration
#+AUTHOR: Emil Lundmark

* Defaults

** User Interface

#+BEGIN_SRC emacs-lisp
(use-package emacs
  :init
  (horizontal-scroll-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  :custom
  (inhibit-startup-screen t)
  (initial-scratch-message nil))
#+END_SRC

** Backup Files

#+BEGIN_SRC emacs-lisp
(use-package emacs
  :init
  (let ((backup-directory
         (file-name-as-directory (locate-user-emacs-file "backups"))))
    (unless (file-directory-p backup-directory)
      (make-directory backup-directory t))
    (setq backup-directory-alist `((".*" . ,backup-directory)))
    (setq auto-save-file-name-transforms `((".*" ,backup-directory t)))))
#+END_SRC

** Custom File

#+BEGIN_SRC emacs-lisp
(use-package emacs
  :custom (custom-file (locate-user-emacs-file "custom.el"))
  :init (when (file-exists-p custom-file) (load custom-file)))
#+END_SRC

** Key Bindings

#+BEGIN_SRC emacs-lisp
(use-package emacs
  :bind ([remap zap-to-char] . zap-up-to-char))
#+END_SRC

** Text

#+BEGIN_SRC emacs-lisp
(use-package emacs
  :custom
  (colon-double-space nil)
  (fill-column 80)
  (indent-tabs-mode nil)
  (sentence-end-double-space nil)
  (tab-width 2))
#+END_SRC

** Miscellaneous

#+BEGIN_SRC emacs-lisp
(use-package emacs
  :custom
  (confirm-kill-emacs #'yes-or-no-p)
  (create-lockfiles nil)
  (require-final-newline 'visit-save)
  (ring-bell-function 'ignore)
  (save-interprogram-paste-before-kill t)
  (uniquify-buffer-name-style 'forward)
  :config
  (column-number-mode 1)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (line-number-mode 1)
  (put 'downcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  :hook (find-file . size-indication-mode))
#+END_SRC

* Custom Functions

** Configuration Management

#+BEGIN_SRC emacs-lisp
(use-package emacs
  :config
  (defun my-config-find-file (filename)
    (interactive
     (list
      (completing-read
       "Find config file: "
       (append `(,early-init-file ,user-init-file) my-config--org-files))))
    (find-file filename))
  :bind
  ("C-c d f" . my-config-find-file))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package emacs
  :config
  (defun my-config-reload ()
    (interactive)
    (load user-init-file))
  :bind
  ("C-c d r" . my-config-reload))
#+END_SRC

** Message Composing

#+BEGIN_SRC emacs-lisp
(use-package emacs
  :config
  (defun my-message-compose-mode ()
    (setq fill-column 72)
    (auto-fill-mode 1)))
#+END_SRC

* Packages

** Built-in

*** display-fill-column-indicator

#+BEGIN_SRC emacs-lisp
(use-package display-fill-column-indicator
  :if (>= emacs-major-version 27)
  :hook ((find-file prog-mode text-mode) . display-fill-column-indicator-mode))
#+END_SRC

*** display-line-numbers

#+BEGIN_SRC emacs-lisp
(use-package display-line-numbers
  :hook (find-file . display-line-numbers-mode))
#+END_SRC

*** flyspell

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :hook
  (prog-mode . flyspell-prog-mode)
  (text-mode . flyspell-mode))
#+END_SRC

*** hl-line

#+BEGIN_SRC emacs-lisp
(use-package hl-line
  :config (global-hl-line-mode 1))
#+END_SRC

*** paren

#+BEGIN_SRC emacs-lisp
(use-package paren
  :custom (show-paren-delay 0)
  :hook (prog-mode . show-paren-mode))
#+END_SRC

*** saveplace

#+BEGIN_SRC emacs-lisp
(use-package saveplace
  :config (save-place-mode 1))
#+END_SRC

*** subword

#+BEGIN_SRC emacs-lisp
(use-package subword
  :diminish
  :hook (prog-mode . subword-mode))
#+END_SRC

*** whitespace

#+BEGIN_SRC emacs-lisp
(use-package whitespace
  :diminish
  :custom
  (whitespace-style '(face
                      trailing
                      lines-tail
                      empty
                      space-after-tab
                      space-before-tab
                      tab-mark))
  :hook
  ((find-file prog-mode text-mode) . whitespace-mode))
#+END_SRC

*** winner

#+BEGIN_SRC emacs-lisp
(use-package winner
  :after bind-key
  :config
  (unbind-key "C-c <left>")
  (unbind-key "C-c <right>")
  (winner-mode 1)
  :bind
  ("C-c w n" . winner-redo)
  ("C-c w p" . winner-undo))
#+END_SRC

** External

*** bind-key

#+BEGIN_SRC emacs-lisp
(use-package bind-key
  :ensure t
  :after use-package)
#+END_SRC

*** color-theme-sanityinc-tomorrow

#+BEGIN_SRC emacs-lisp
(use-package color-theme-sanityinc-tomorrow
  :ensure t
  :config (load-theme 'sanityinc-tomorrow-eighties t))
#+END_SRC

*** diminish

#+BEGIN_SRC emacs-lisp
(use-package diminish
  :ensure t
  :after use-package)
#+END_SRC

*** eglot

#+BEGIN_SRC emacs-lisp
(use-package eglot
  :ensure t)
#+END_SRC

*** fill-column-indicator

#+BEGIN_SRC emacs-lisp
(use-package fill-column-indicator
  :if (< emacs-major-version 27)
  :ensure t
  :hook ((find-file prog-mode text-mode) . fci-mode))
#+END_SRC

*** flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :custom (flycheck-disabled-checkers '(yaml-ruby))
  :config (global-flycheck-mode 1))
#+END_SRC

*** hl-todo

#+BEGIN_SRC emacs-lisp
(use-package hl-todo
  :ensure t
  :config (global-hl-todo-mode 1))
#+END_SRC

*** ivy, counsel, swiper

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :diminish
  :config (ivy-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ivy-rich
  :ensure t
  :after (counsel ivy)
  :config (ivy-rich-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :after ivy
  :diminish
  :config (counsel-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :after ivy
  :bind
  ([remap isearch-forward] . swiper)
  ([remap isearch-backward] . swiper))
#+END_SRC

*** json-mode

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :ensure t)
#+END_SRC

*** magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :config (global-magit-file-mode 1)
  :hook (git-commit-mode . my-message-compose-mode)
  :bind ("C-c g" . magit-status))
#+END_SRC

*** markdown-mode

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :custom (markdown-command "pandoc"))
#+END_SRC

*** org

This is already ensured to be installed in =init.el=.

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom
  (org-catch-invisible-edits 'error)
  (org-edit-src-content-indentation 0)
  (org-src-preserve-indentation t))
#+END_SRC

*** which-key

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :diminish
  :config (which-key-mode 1))
#+END_SRC

*** yaml-mode

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t)
#+END_SRC
