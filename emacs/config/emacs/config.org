# SPDX-FileCopyrightText: 2019 Emil Lundmark <emil@lndmrk.se>
# SPDX-License-Identifier: GPL-3.0-or-later
#+TITLE: lndmrk's Emacs Configuration
#+AUTHOR: Emil Lundmark

* Defaults

** User Interface

#+begin_src emacs-lisp
(use-package emacs
  :init
  (horizontal-scroll-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  :custom
  (inhibit-startup-echo-area-message (user-login-name))
  (inhibit-startup-screen t)
  (initial-scratch-message nil))
#+end_src

#+begin_src emacs-lisp
(use-package server
  :custom (server-client-instructions nil))
#+end_src

** Backup Files

#+begin_src emacs-lisp
(use-package files
  :init
  (let ((backup-directory
         (file-name-as-directory (locate-user-emacs-file "backups"))))
    (unless (file-directory-p backup-directory)
      (make-directory backup-directory t))
    (setq backup-directory-alist `((".*" . ,backup-directory))))
  (defun my-backup-enable-p (name)
    (when (normal-backup-enable-predicate name)
      (let ((backup-ignore-regexp-list '("\\.asc$" "\\.gpg$" "^/dev/shm"))
            (result t))
        (dolist (regexp backup-ignore-regexp-list result)
          (setq result (and result (not (string-match regexp name))))))))
  (setq backup-enable-predicate #'my-backup-enable-p)
  :config
  (auto-save-visited-mode 1))
#+end_src

** Custom File

#+begin_src emacs-lisp
(use-package emacs
  :custom (custom-file (locate-user-emacs-file "custom.el"))
  :init (when (file-exists-p custom-file) (load custom-file)))
#+end_src

** Key Bindings

*** Unbind Aliases

#+begin_src emacs-lisp
(use-package emacs
  :config
  (unbind-key "<begin>")
  (unbind-key "<deletechar>")
  (unbind-key "<down>")
  (unbind-key "<end>")
  (unbind-key "<home>")
  (unbind-key "<insert>")
  (unbind-key "<insertchar>")
  (unbind-key "<left>")
  (unbind-key "<next>")
  (unbind-key "<prior>")
  (unbind-key "<right>")
  (unbind-key "<up>")
  (unbind-key "C-<backspace>")
  (unbind-key "C-<delete>")
  (unbind-key "C-<down>")
  (unbind-key "C-<end>")
  (unbind-key "C-<home>")
  (unbind-key "C-<insert>")
  (unbind-key "C-<insertchar>")
  (unbind-key "C-<left>")
  (unbind-key "C-<right>")
  (unbind-key "C-<up>")
  (unbind-key "C-M-<down>")
  (unbind-key "C-M-<end>")
  (unbind-key "C-M-<home>")
  (unbind-key "C-M-<left>")
  (unbind-key "C-M-<right>")
  (unbind-key "C-M-<up>")
  (unbind-key "C-c <left>")
  (unbind-key "C-c <right>")
  (unbind-key "C-x <left>")
  (unbind-key "C-x <right>")
  (unbind-key "C-x C-<left>")
  (unbind-key "C-x C-<right>")
  (unbind-key "M-<begin>")
  (unbind-key "M-<end>")
  (unbind-key "M-<home>")
  (unbind-key "M-<left>")
  (unbind-key "M-<next>")
  (unbind-key "M-<prior>")
  (unbind-key "M-<right>")
  (unbind-key "S-<delete>")
  (unbind-key "S-<insert>")
  (unbind-key "S-<insertchar>"))
#+end_src

*** Better Defaults

#+begin_src emacs-lisp
(use-package emacs
  :config
  (unbind-key "C-S-<backspace>")
  (unbind-key "C-x C-z")
  (unbind-key "C-z")
  :bind
  (("C-S-k" . kill-whole-line)
   ("M-o" . cycle-spacing)
   ([remap capitalize-word] . capitalize-dwim)
   ([remap delete-horizontal-space] . cycle-spacing)
   ([remap downcase-word] . downcase-dwim)
   ([remap query-replace] . query-replace-regexp)
   ([remap upcase-word] . upcase-dwim)
   ([remap zap-to-char] . zap-up-to-char)))
#+end_src

** Text

#+begin_src emacs-lisp
(use-package emacs
  :custom
  (colon-double-space nil)
  (fill-column 80)
  (indent-tabs-mode nil)
  (sentence-end-double-space nil)
  (standard-indent 2)
  (tab-always-indent 'complete)
  (tab-first-completion 'eol)
  (tab-width standard-indent))
#+end_src

** Minibuffer

#+begin_src emacs-lisp
(use-package emacs
  :custom (enable-recursive-minibuffers t))
#+end_src

#+begin_src emacs-lisp
(use-package mb-depth
  :config (minibuffer-depth-indicate-mode 1))
#+end_src

** Miscellaneous

#+begin_src emacs-lisp
(use-package emacs
  :custom
  (confirm-kill-emacs #'yes-or-no-p)
  (create-lockfiles nil)
  (delete-by-moving-to-trash t)
  (next-error-message-highlight t)
  (read-extended-command-predicate #'command-completion-default-include-p)
  (require-final-newline 'visit-save)
  (ring-bell-function 'ignore)
  (save-interprogram-paste-before-kill t)
  (uniquify-buffer-name-style 'forward)
  (use-short-answers t)
  :config
  (column-number-mode 1)
  (line-number-mode 1)
  (put 'narrow-to-region 'disabled nil)
  :hook
  ((c++-mode c-mode) . (lambda () (c-toggle-comment-style -1)))
  (after-save . executable-make-buffer-file-executable-if-script-p)
  (find-file . size-indication-mode))
#+end_src

* Custom Functions

** Configuration Management

#+begin_src emacs-lisp
(use-package emacs
  :config
  (defun my-config-find-file (filename)
    "Edit config file FILENAME."
    (interactive
     (let ((config-files
            (append `(,early-init-file ,user-init-file) my-config--org-files))
           (collection
            (lambda (string predicate action)
              (if (eq action 'metadata)
                  '(metadata (category . file))
                (complete-with-action action config-files string predicate)))))
       (list (completing-read
              "Find config file: " collection nil 'require-match))))
    (find-file filename))
  (defun my-config-reload ()
    "Reload all config files."
    (interactive)
    (load user-init-file))
  :bind
  (("C-c d f" . my-config-find-file)
   ("C-c d r" . my-config-reload)))
#+end_src

** Formatting

#+begin_src emacs-lisp
(use-package emacs
  :config
  (defun my-format-buffer (&optional buffer-or-name)
    "Format BUFFER-OR-NAME, or the current buffer if omitted."
    (interactive)
    (with-current-buffer (or buffer-or-name (current-buffer))
      (my-format-region (point-min) (point-max))))
  (defun my-format-region (start end)
    "Format the region between START and END."
    (interactive "r")
    (save-excursion
      (if (and (fboundp #'eglot-managed-p) (eglot-managed-p))
          (eglot-format start end)
        (indent-region start end)
        (whitespace-cleanup-region start end))))
  (defun my-sort-lines-fold-case ()
    "Wrapper around `sort-lines' with `sort-fold-case' set to t."
    (interactive)
    (let ((sort-fold-case t))
      (call-interactively #'sort-lines))))
#+end_src

** Message Composing

#+begin_src emacs-lisp
(use-package emacs
  :config
  (defun my-message-compose-mode ()
    (my-set-fill-column 72)
    (auto-fill-mode 1)))
#+end_src

** Text

#+begin_src emacs-lisp
(use-package emacs
  :config
  (defun my-set-fill-column (n)
    (setq-local fill-column n)
    (setq-local whitespace-line-column nil)
    (when (bound-and-true-p whitespace-mode)
      (whitespace-mode 0)
      (whitespace-mode 1))))
#+end_src

* Packages

** Built-in

*** autorevert

#+begin_src emacs-lisp
(use-package autorevert
  :custom (global-auto-revert-non-file-buffers t)
  :config (global-auto-revert-mode 1))
#+end_src

*** cc-mode

#+begin_src emacs-lisp
(use-package cc-mode
  :custom
  (c-basic-offset standard-indent)
  :config
  (define-advice c-indent-line-or-region (:around (f &rest args) complete)
    (let ((saved-point (point)))
      (apply f args)
      (when (= saved-point (point))
        (completion-at-point)))))
#+end_src

*** comp

#+begin_src emacs-lisp
(use-package comp
  :custom (native-comp-async-report-warnings-errors 'silent))
#+end_src

*** compile

#+begin_src emacs-lisp
(use-package compile
  :custom
  (compilation-ask-about-save nil)
  (compilation-scroll-output t))
#+end_src

*** dabbrev

#+begin_src emacs-lisp
(use-package dabbrev
  :bind*
  ("C-M-i" . dabbrev-completion))
#+end_src

*** dired

#+begin_src emacs-lisp
(use-package dired
  :custom
  (dired-dwim-target t)
  (dired-kill-when-opening-new-dired-buffer t)
  (dired-recursive-copies 'always)
  (dired-recursive-deletes 'always)
  :config
  (defun my-dired-xdg-open-file ()
    "Open file with preferred application using xdg-open."
    (interactive)
    (let ((file (dired-get-filename nil t)))
      (call-process "xdg-open" nil 0 nil file)))
  :bind
  (:map dired-mode-map
   ("C-<return>" . my-dired-xdg-open-file)))
#+end_src

*** display-fill-column-indicator

#+begin_src emacs-lisp
(use-package display-fill-column-indicator
  :hook ((find-file prog-mode text-mode) . display-fill-column-indicator-mode))
#+end_src

*** display-line-numbers

#+begin_src emacs-lisp
(use-package display-line-numbers
  :custom (display-line-numbers-widen t)
  :hook (find-file . display-line-numbers-mode))
#+end_src

*** ediff

#+begin_src emacs-lisp
(use-package ediff
  :custom (ediff-window-setup-function #'ediff-setup-windows-plain))
#+end_src

*** eldoc

#+begin_src emacs-lisp
(use-package eldoc
  :custom (eldoc-echo-area-use-multiline-p nil))
#+end_src

*** elisp-mode

#+begin_src emacs-lisp
(use-package elisp-mode
  :hook
  (emacs-lisp-mode . (lambda () (setq-local sentence-end-double-space t))))
#+end_src

*** flyspell

#+begin_src emacs-lisp
(use-package flyspell
  :hook
  (prog-mode . flyspell-prog-mode)
  (text-mode . flyspell-mode))
#+end_src

*** hideshow

#+begin_src emacs-lisp
(use-package hideshow
  :hook (prog-mode . hs-minor-mode))
#+end_src

*** hl-line

#+begin_src emacs-lisp
(use-package hl-line
  :config (global-hl-line-mode 1))
#+end_src

*** js

#+begin_src emacs-lisp
(use-package js
  :custom (js-indent-level standard-indent))
#+end_src

*** paren

#+begin_src emacs-lisp
(use-package paren
  :custom (show-paren-delay 0))
#+end_src

*** python

#+begin_src emacs-lisp
(use-package python
  :hook (python-mode . (lambda () (my-set-fill-column 88))))
#+end_src

*** recentf

#+begin_src emacs-lisp
(use-package recentf
  :custom (recentf-max-saved-items 50)
  :config (recentf-mode 1))
#+end_src

*** savehist

#+begin_src emacs-lisp
(use-package savehist
  :config (savehist-mode 1))
#+end_src

*** saveplace

#+begin_src emacs-lisp
(use-package saveplace
  :config (save-place-mode 1))
#+end_src

*** sh-script

#+begin_src emacs-lisp
(use-package sh-script
  :custom (sh-basic-offset standard-indent))
#+end_src

*** smerge-mode

#+begin_src emacs-lisp
(use-package smerge-mode
  :custom (smerge-command-prefix (kbd "C-c v")))
#+end_src

*** so-long

#+begin_src emacs-lisp
(use-package so-long
  :config (global-so-long-mode 1))
#+end_src

*** subword

#+begin_src emacs-lisp
(use-package subword
  :hook (prog-mode . subword-mode))
#+end_src

*** whitespace

#+begin_src emacs-lisp
(use-package whitespace
  :custom
  (whitespace-line-column nil)
  (whitespace-style '(face
                      trailing
                      lines-tail
                      missing-newline-at-eof
                      empty
                      indentation::space
                      space-after-tab
                      space-before-tab
                      tab-mark))
  :config
  (defun my-whitespace-reload ()
    (whitespace-turn-off)
    (whitespace-turn-on-if-enabled))
  :hook
  ((find-file prog-mode text-mode) . whitespace-mode)
  (after-save . my-whitespace-reload))
#+end_src

*** windmove

#+begin_src emacs-lisp
(use-package windmove
  :custom
  (windmove-wrap-around t)
  :bind
  (("M-s-H" . windmove-swap-states-left)
   ("M-s-J" . windmove-swap-states-down)
   ("M-s-K" . windmove-swap-states-up)
   ("M-s-L" . windmove-swap-states-right)
   ("M-s-h" . windmove-left)
   ("M-s-j" . windmove-down)
   ("M-s-k" . windmove-up)
   ("M-s-l" . windmove-right)))
#+end_src

*** winner

#+begin_src emacs-lisp
(use-package winner
  :config
  (unbind-key "C-c <left>")
  (unbind-key "C-c <right>")
  (winner-mode 1)
  :bind
  (("C-c w C-/" . winner-undo)
   ("C-c w C-?" . winner-redo)))
#+end_src

** External

*** cape

#+begin_src emacs-lisp
(use-package cape
  :ensure t
  :demand t
  :config
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  :bind
  ("C-." . cape-file))
#+end_src

*** consult

#+begin_src emacs-lisp
(use-package consult
  :ensure t
  :custom
  (consult-narrow-key "<")
  (xref-show-definitions-function #'consult-xref)
  (xref-show-xrefs-function #'consult-xref)
  :bind
  (("C-c g I" . consult-imenu-multi)
   ("C-c g M" . consult-global)
   ("C-c g e" . consult-compile-error)
   ("C-c g f" . consult-flymake)
   ("C-c g i" . consult-imenu)
   ("C-c g m" . consult-mark)
   ("C-c g o" . consult-outline)
   ("C-c s F" . consult-locate)
   ("C-c s G" . consult-grep)
   ("C-c s L" . consult-line-multi)
   ("C-c s f" . consult-find)
   ("C-c s g" . consult-ripgrep)
   ("C-c s k" . consult-keep-lines)
   ("C-c s l" . consult-line)
   ("C-c s u" . consult-focus-lines)
   ("C-c s v" . consult-git-grep)
   ([remap bookmark-jump] . consult-bookmark)
   ([remap goto-line] . consult-goto-line)
   ([remap isearch-backward] . consult-line)
   ([remap isearch-forward] . consult-line)
   ([remap project-switch-to-buffer] . consult-project-buffer)
   ([remap repeat-complex-command] . consult-complex-command)
   ([remap switch-to-buffer-other-frame] . consult-buffer-other-frame)
   ([remap switch-to-buffer-other-window] . consult-buffer-other-window)
   ([remap switch-to-buffer] . consult-buffer)
   ([remap yank-pop] . consult-yank-pop)
   :map minibuffer-local-map
   ("M-s" . consult-history)
   ("M-r" . consult-history)))
#+end_src

*** corfu

#+begin_src emacs-lisp
(use-package corfu
  :ensure t
  :demand t
  :custom
  (corfu-cycle t)
  (corfu-echo-documentation t)
  :config
  (defun my-corfu-enable-in-minibuffer ()
    (when (where-is-internal #'completion-at-point (list (current-local-map)))
      (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook #'my-corfu-enable-in-minibuffer)
  (add-to-list 'savehist-additional-variables 'corfu-history)
  (corfu-history-mode 1)
  (corfu-popupinfo-mode 1)
  (global-corfu-mode 1)
  :bind
  (:map corfu-map
   ("SPC" . corfu-insert-separator)))
#+end_src

*** corfu-terminal

#+begin_src emacs-lisp
(use-package corfu-terminal
  :ensure t
  :init
  (defun my-corfu-terminal-mode (&optional frame)
    (unless (display-graphic-p frame)
      (corfu-terminal-mode 1)))
  (add-hook 'after-init-hook #'my-corfu-terminal-mode)
  (add-hook 'after-make-frame-functions #'my-corfu-terminal-mode))
#+end_src

*** edit-indirect

#+begin_src emacs-lisp
(use-package edit-indirect
  :ensure t)
#+end_src

*** eglot

#+begin_src emacs-lisp
(use-package eglot
  :ensure t
  :demand t
  :after (cape tempel)
  :config
  (add-to-list 'eglot-server-programs '((c++-mode c-mode) . ("clangd")))
  (defun my-eglot-ensure-python ()
    (when (my-pyvenv-p)
      (eglot-ensure)))
  (defun my-eglot-managed-mode ()
    (setq-local
     completion-at-point-functions
     (cons (cape-super-capf #'tempel-complete #'eglot-completion-at-point)
           completion-at-point-functions))
    (flycheck-mode -1))
  :hook
  ((c++-mode c-mode) . eglot-ensure)
  (eglot-managed-mode . my-eglot-managed-mode)
  (python-mode . my-eglot-ensure-python)
  :bind
  (:map eglot-mode-map
   ("C-c l a" . eglot-code-actions)
   ("C-c l d" . eglot-find-declaration)
   ("C-c l f" . eglot-format-buffer)
   ("C-c l r" . eglot-rename)))
#+end_src

#+begin_src emacs-lisp
(use-package consult-eglot
  :ensure t
  :after consult
  :bind
  (:map eglot-mode-map
   ([remap xref-find-apropos] . consult-eglot-symbols)))
#+end_src

*** embark

#+begin_src emacs-lisp
(use-package embark
  :ensure t
  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  :custom
  (embark-indicators
   '(embark-minimal-indicator
     embark-highlight-indicator
     embark-isearch-highlight-indicator))
  :config
  (defun my-embark-target-current-buffer ()
    `(current-buffer ,(buffer-name)))
  (add-to-list 'embark-target-finders #'my-embark-target-current-buffer 'append)
  (defvar-keymap my-embark-current-buffer-map
    :doc "Keymap for Embark actions on current buffer."
    :parent embark-general-map
    "c" #'clone-buffer
    "f" #'my-format-buffer
    "g" #'revert-buffer
    "r" #'embark-rename-buffer
    "|" #'embark-shell-command-on-buffer)
  (add-to-list 'embark-keymap-alist
               '(current-buffer . my-embark-current-buffer-map))
  (add-to-list 'embark-repeat-actions #'string-inflection-all-cycle)
  :bind
  (:map embark-expression-map
   ("f" . my-format-region)
   :map embark-identifier-map
   ("-" . string-inflection-all-cycle)
   :map embark-region-map
   ("F" . fill-region)
   ("f" . my-format-region)
   :map embark-sort-map
   ("L" . my-sort-lines-fold-case))
  :bind*
  (("C-M-/" . embark-dwim)
   ("M-/" . embark-act)))
#+end_src

#+begin_src emacs-lisp
(use-package embark-consult
  :ensure t)
#+end_src

*** exec-path-from-shell

Use this as a workaround until I've sorted out if shell or systemd should be the
source of truth for environment variables.

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :config
  (when (daemonp)
    (exec-path-from-shell-initialize)))
#+end_src

*** flycheck

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :custom (flycheck-disabled-checkers '(yaml-ruby))
  :config (global-flycheck-mode 1))
#+end_src

#+begin_src emacs-lisp
(use-package consult-flycheck
  :ensure t
  :bind ("C-c g F" . consult-flycheck))
#+end_src

*** flyspell-correct

#+begin_src emacs-lisp
(use-package flyspell-correct
  :ensure t
  :after flyspell
  :bind ([remap ispell-word] . flyspell-correct-wrapper))
#+end_src

*** gtk-variant

#+begin_src emacs-lisp
(use-package gtk-variant
  :ensure t
  :hook ((server-after-make-frame window-setup) . gtk-variant-set-frame))
#+end_src

*** hl-todo

#+begin_src emacs-lisp
(use-package hl-todo
  :ensure t
  :config (global-hl-todo-mode 1))
#+end_src

*** json-mode

#+begin_src emacs-lisp
(use-package json-mode
  :ensure t)
#+end_src

*** keyfreq

#+begin_src emacs-lisp
(use-package keyfreq
  :ensure t
  :custom
  (keyfreq-excluded-commands '(self-insert-command))
  (keyfreq-file (expand-file-name (locate-user-emacs-file "keyfreq")))
  :config
  (keyfreq-autosave-mode 1)
  (keyfreq-mode 1))
#+end_src

*** kind-icon

#+begin_src emacs-lisp
(use-package kind-icon
  :ensure t
  :after corfu
  :custom
  (kind-icon-blend-frac 0)
  (kind-icon-default-face 'corfu-default)
  (kind-icon-use-icons nil)
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

*** magit

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :custom
  (magit-define-global-key-bindings t)
  (magit-diff-refine-hunk 'all)
  :hook
  (git-commit-mode . my-message-compose-mode))
#+end_src

*** marginalia

#+begin_src emacs-lisp
(use-package marginalia
  :ensure t
  :config (marginalia-mode 1))
#+end_src

*** markdown-mode

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :custom
  (markdown-command "pandoc")
  (markdown-fontify-code-blocks-natively t)
  (markdown-list-indent-width standard-indent))
#+end_src

*** modus-theme

#+begin_src emacs-lisp
(use-package modus-themes
  :ensure t
  :custom
  (modus-themes-org-blocks 'gray-background)
  (modus-themes-common-palette-overrides
   '((border-mode-line-active unspecified)
     (border-mode-line-inactive unspecified)
     (bg-line-number-active unspecified)
     (bg-line-number-inactive unspecified)
     (fg-line-number-active fg-main)
     (fg-line-number-inactive fg-dim)
     (fg-region unspecified)))
  (modus-vivendi-palette-overrides
   '((bg-main "#171717")
     (bg-dim "#2A2A2A")
     (bg-active"#5D5D5D")
     (bg-inactive "#3A3A3A")
     (border "#6E6E6E")))
  :config
  (load-theme 'modus-vivendi :no-confirm))
#+end_src

The =bg-main= color have been overridden to match my terminal background color.
Other background colors have been adjusted accordingly to retain the contrast
ratio.

| bg-main     |         | #000000 | #171717 |
|-------------+---------+---------+---------|
| bg-dim      | #1E1E1E |    1.26 |         |
| bg-active   | #535353 |    2.73 |         |
| bg-inactive | #303030 |    1.59 |         |
| border      | #646464 |    3.55 |         |
|-------------+---------+---------+---------|
| bg-dim      | #2A2A2A |         |    1.25 |
| bg-active   | #5D5D5D |         |    2.72 |
| bg-inactive | #3A3A3A |         |    1.58 |
| border      | #6E6E6E |         |    3.52 |
#+tblfm: @2$3..@5$3='(modus-themes-contrast @1$3 $2);%0.2f::@6$4..@9$4='(modus-themes-contrast @1$4 $2);%0.2f

*** mood-line

#+begin_src emacs-lisp
(use-package mood-line
  :ensure t
  :custom (mood-line-show-eol-style t)
  :config (mood-line-mode 1))
#+end_src

*** multiple-cursors

#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind
  (("C-c m a" . mc/mark-all-like-this)
   ("C-c m c" . mc/edit-lines)
   ("C-c m d" . mc/mark-all-dwim)
   ("C-c m M-n" . mc/skip-to-next-like-this)
   ("C-c m M-p" . mc/skip-to-previous-like-this)
   ("C-c m n" . mc/mark-next-like-this)
   ("C-c m p" . mc/mark-previous-like-this)
   ("C-c m r" . set-rectangular-region-anchor)))
#+end_src

*** orderless

#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion))))
  (orderless-style-dispatchers
   '(my-orderless-flex
     my-orderless-prefixes
     my-orderless-without-literal))
  :config
  (defun my-orderless-flex (pattern _index _total)
    (when (string-suffix-p "~" pattern)
      `(orderless-flex . ,(substring pattern 0 -1))))
  (defun my-orderless-prefixes (pattern _index _total)
    (when (string-suffix-p "^" pattern)
      `(orderless-prefixes . ,(substring pattern 0 -1))))
  (defun my-orderless-without-literal (pattern _index _total)
    (cond
     ((equal "!" pattern)
      '(orderless-literal . ""))
     ((string-prefix-p "!" pattern)
      `(orderless-without-literal . ,(substring pattern 1))))))
#+end_src

*** org

This is already ensured to be installed in =init.el=.

#+begin_src emacs-lisp
(use-package org
  :custom
  (org-adapt-indentation nil)
  (org-catch-invisible-edits 'error)
  (org-edit-src-content-indentation 0)
  (org-src-preserve-indentation t))
#+end_src

*** projectile

#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :custom
  (projectile-mode-line-prefix " P")
  :config
  (add-to-list 'mode-line-misc-info `(projectile-mode projectile--mode-line))
  :bind-keymap
  ("C-c p" . projectile-command-map))
#+end_src

*** pyvenv

#+begin_src emacs-lisp
(use-package pyvenv
  :ensure t
  :init
  (defun my-pyvenv-p ()
    (bound-and-true-p pyvenv-virtual-env))
  (defun my-pyvenv-install-packages ()
    "Install desired packages in the virtual environment."
    (interactive)
    (let ((packages '("pylsp-mypy"
                      "pylsp-rope"
                      "python-lsp-black"
                      "python-lsp-server")))
      (when (my-pyvenv-p)
        (with-current-buffer (get-buffer-create "*virtualenv-pip*")
          (apply 'call-process
                 "pip" nil t t
                 "install" "--upgrade" "--upgrade-strategy" "eager"
                 packages)))))
  (add-hook 'pyvenv-post-activate-hooks #'my-pyvenv-install-packages))
#+end_src

*** shackle

#+begin_src emacs-lisp
(use-package shackle
  :ensure t
  :custom (shackle-default-rule '(:select t))
  :config (shackle-mode 1))
#+end_src

*** string-inflection

#+begin_src emacs-lisp
(use-package string-inflection
  :ensure t)
#+end_src

*** systemd

#+begin_src emacs-lisp
(use-package systemd
  :ensure t)
#+end_src

*** tempel

#+begin_src emacs-lisp
(use-package tempel
  :ensure t
  :custom
  (tempel-path (expand-file-name (locate-user-emacs-file "templates/*.eld")))
  (tempel-trigger-prefix "<")
  :config
  (defun my-comment-start ()
    (if (derived-mode-p 'emacs-lisp-mode)
        ";; "
      comment-start))
  (defun my-project-file-name ()
    (file-relative-name
     (buffer-file-name) (ignore-errors (projectile-project-root))))
  (defun my-tempel-setup-capf ()
    (setq-local completion-at-point-functions
                (cons #'tempel-complete completion-at-point-functions)))
  :hook
  ((prog-mode text-mode) . my-tempel-setup-capf)
  :bind
  ("C-c l t" . tempel-insert))
#+end_src

*** vertico

#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :demand t
  :custom
  (vertico-cycle t)
  :config
  (vertico-mode 1)
  (vertico-multiform-mode 1)
  :bind
  (:map vertico-map
   ("C-M-n" . vertico-next-group)
   ("C-M-p" . vertico-previous-group)))
#+end_src

*** wgrep

#+begin_src emacs-lisp
(use-package wgrep
  :ensure t)
#+end_src

*** yaml-mode

#+begin_src emacs-lisp
(use-package yaml-mode
  :ensure t
  :custom (yaml-indent-offset standard-indent))
#+end_src
