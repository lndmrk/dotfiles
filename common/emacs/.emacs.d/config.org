* Sane defaults

** Backups

Place backup files in its own directory.

#+BEGIN_SRC emacs-lisp
(defconst backup-directory (concat user-emacs-directory "backups"))
(setq backup-directory-alist `((".*" . ,backup-directory)))
(setq auto-save-file-name-transforms `((".*" ,backup-directory t)))
#+END_SRC

** Buffer

#+BEGIN_SRC emacs-lisp
(add-hook 'find-file-hook 'linum-mode)

(require 'hl-line)
(global-hl-line-mode)

(show-paren-mode t)
(setq show-paren-delay 0)

(setq show-trailing-whitespace t)
#+END_SRC

** Configuration management

#+BEGIN_SRC emacs-lisp
(setq user-emacs-config
      (concat (file-name-as-directory user-emacs-directory) "config.org"))

(setq user-emacs-local-config
      (concat (file-name-as-directory user-emacs-directory) "local.org"))

(defun user-open-config () (interactive) (find-file user-emacs-config))

(defun user-open-local-config () (interactive)
       (find-file user-emacs-local-config))

(defun user-reload-config () (interactive)
       (mapc #'org-babel-load-file
             (directory-files user-emacs-directory t "\\.org$")))
#+END_SRC

** Customizations

Don't save customizations in =init.el=.

#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file 'noerror)
#+END_SRC

** Minibuffer

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Mode line

#+BEGIN_SRC emacs-lisp
(setq column-number-mode t)
#+END_SRC

** Notifications

#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

** Org

#+BEGIN_SRC emacs-lisp
(setq org-src-preserve-indentation t)
#+END_SRC

** Shell

#+BEGIN_SRC emacs-lisp
(defvar my-term-shell "/bin/bash")
(defadvice ansi-term (before force-bash)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)

(global-set-key (kbd "<M-RET>") 'ansi-term)
#+END_SRC

** Spell checking

#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'flyspell-mode)
#+END_SRC

* Theme

#+BEGIN_SRC emacs-lisp
(use-package color-theme-sanityinc-tomorrow
  :ensure t
  :config
  (load-theme 'sanityinc-tomorrow-eighties t)
  (color-theme-sanityinc-tomorrow--with-colors
   'eighties
   (custom-set-variables
    '(xterm-color-names
      ["#030202" "#AC282B" "#3F8F3F" "#C18A1C"
       "#29649D" "#8D3F8D" "#249393" "#999898"])
    `(xterm-color-names-bright
      ["#666666" ,red ,green ,yellow
       ,blue ,purple ,aqua ,foreground]))))
#+END_SRC

* Packages

** eterm-256color

#+BEGIN_SRC emacs-lisp
(use-package eterm-256color
  :ensure t
  :hook (term-mode . eterm-256color-mode)
  :init (setq eterm-256color-disable-bold nil))
#+END_SRC

** fill-column-indicator

#+BEGIN_SRC emacs-lisp
(use-package fill-column-indicator
  :ensure t
  :init (setq fci-rule-column 80)
        (define-globalized-minor-mode global-fci-mode
                                      fci-mode (lambda () (fci-mode)))
  :config (global-fci-mode))
#+END_SRC
** hl-todo

#+BEGIN_SRC emacs-lisp
(use-package hl-todo
  :ensure t
  :config (global-hl-todo-mode))
#+END_SRC

** ivy, counsel, swiper

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :init (ivy-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :init (counsel-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :bind
  ([remap isearch-forward]  . swiper)
  ([remap isearch-backward] . swiper))
#+END_SRC

** magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind (("C-x g" . magit-status))
  :config (global-magit-file-mode))
#+END_SRC

** markdown-mode

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode "\\.md\\'"
  :init (setq markdown-command "pandoc"))
#+END_SRC

** which-key

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init (which-key-mode))
#+END_SRC
