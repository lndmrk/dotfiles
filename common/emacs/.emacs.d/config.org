* Sane defaults

** Backups

Place backup files in its own directory.

#+BEGIN_SRC emacs-lisp
(defconst backup-directory
  (file-name-as-directory (concat user-emacs-directory "backups")))
(make-directory backup-directory t)
(setq backup-directory-alist `((".*" . ,backup-directory)))
(setq auto-save-file-name-transforms `((".*" ,backup-directory t)))
#+END_SRC

** Buffer

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 80)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package display-line-numbers
  :hook (find-file . display-line-numbers-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package hl-line
  :hook ((find-file prog-mode text-mode) . hl-line-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package paren
  :hook (prog-mode . show-paren-mode)
  :init (setq show-paren-delay 0))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package whitespace
  :diminish
  :hook ((find-file prog-mode text-mode) . whitespace-mode)
  :init
  (setq whitespace-style
      (quote (face
              trailing
              lines-tail
              space-before-tab
              space-after-tab
              tab-mark))))
#+END_SRC

** Customizations

Don't save customizations in =init.el=.

#+BEGIN_SRC emacs-lisp
(setq custom-file (concat user-emacs-directory "custom.el"))
(when (file-exists-p custom-file) (load custom-file))
#+END_SRC

** Frame

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(initial-frame-alist '((fullscreen . maximized))))
#+END_SRC

** Mail

#+BEGIN_SRC emacs-lisp
(defun my-message-compose ()
  (setq fill-column 72)
  (auto-fill-mode))
#+END_SRC

** Minibuffer

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Mode line

#+BEGIN_SRC emacs-lisp
(column-number-mode)
#+END_SRC

** Notifications

#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

** Org

#+BEGIN_SRC emacs-lisp
(setq org-src-preserve-indentation t)
#+END_SRC

** Shell

#+BEGIN_SRC emacs-lisp
(defvar my-term-shell "/bin/bash")

(defadvice ansi-term (before force-bash)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)

(global-set-key (kbd "<M-return>") 'ansi-term)
#+END_SRC

** Spell checking

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :hook ((text-mode . flyspell-mode)
         (prog-mode . flyspell-prog-mode)))
#+END_SRC

* Theme

#+BEGIN_SRC emacs-lisp
(use-package color-theme-sanityinc-tomorrow
  :ensure t
  :config
  (load-theme 'sanityinc-tomorrow-eighties t)
  (color-theme-sanityinc-tomorrow--with-colors
   'eighties
   (custom-set-variables
    '(xterm-color-names
      ["#030202" "#AC282B" "#3F8F3F" "#C18A1C"
       "#29649D" "#8D3F8D" "#249393" "#999898"])
    `(xterm-color-names-bright
      ["#666666" ,red ,green ,yellow
       ,blue ,purple ,aqua ,foreground]))))
#+END_SRC

* Packages

** eterm-256color

#+BEGIN_SRC emacs-lisp
(use-package eterm-256color
  :ensure t
  :hook (term-mode . eterm-256color-mode)
  :init (setq eterm-256color-disable-bold nil))
#+END_SRC

** fill-column-indicator

#+BEGIN_SRC emacs-lisp
(use-package fill-column-indicator
  :ensure t
  :hook ((find-file prog-mode text-mode) . fci-mode))
#+END_SRC

** hl-todo

#+BEGIN_SRC emacs-lisp
(use-package hl-todo
  :ensure t
  :config (global-hl-todo-mode))
#+END_SRC

** ivy, counsel, swiper

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :diminish
  :config (ivy-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ivy-rich
  :ensure t
  :requires (ivy counsel)
  :config (ivy-rich-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :diminish
  :config (counsel-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :bind
  ([remap isearch-forward] . swiper)
  ([remap isearch-backward] . swiper))
#+END_SRC

** magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :hook (git-commit-mode . my-message-compose)
  :bind ("C-x g" . magit-status)
  :config (global-magit-file-mode))
#+END_SRC

** markdown-mode

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :init (setq markdown-command "pandoc"))
#+END_SRC

** which-key

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :diminish
  :config (which-key-mode))
#+END_SRC
