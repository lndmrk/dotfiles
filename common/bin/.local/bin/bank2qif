#!/usr/bin/env python3

import argparse
import datetime
import sys

def parse_csv(filename, indicies_map, delimiter=";", skip_header=True):
    import csv

    i_date = indicies_map["date"]
    i_amount = indicies_map["amount"]
    i_memo = indicies_map["memo"]

    transactions = []
    with open(filename) as f:
        book = csv.reader(f, delimiter=delimiter)
        if skip_header:
            book.__next__()
        for r in book:
            if len(r) == 0:
                continue

            date = datetime.datetime.strptime(r[i_date], "%Y-%m-%d")
            date = date.strftime("%m/%d/%y")
            amount = r[i_amount][:-3].replace(" ", "").replace(",", ".")
            amount = r[i_amount].replace(".", "") \
                                .replace(" ", "") \
                                .replace(",", ".")
            memo = r[i_memo]

            transactions.append({
                "date": date,
                "amount": amount,
                "memo": memo
            })

    return transactions

def parse_ica(filename):
    indicies_map = {
        "date": 0,
        "amount": 4,
        "memo": 1
    }
    transactions = parse_csv(filename, indicies_map)
    return transactions, ""

def parse_nordea(filename):
    indicies_map = {
        "date": 0,
        "amount": 3,
        "memo": 1
    }
    transactions = parse_csv(filename, indicies_map, ",")
    return transactions, ""

def parse_swedbank(filename):
    import pyexcel_xls

    book = pyexcel_xls.get_data(filename)
    book = book["Blad1"][5:]

    transactions = []
    for r in book:
        if len(r) == 0:
            continue

        date = datetime.datetime.strptime(r[5], "%y-%m-%d")
        date = date.strftime("%m/%d/%y")
        amount = r[8]
        memo = r[6]

        t = {
            "date": date,
            "amount": amount,
            "memo": memo,
        }
        transactions.append(t)

    account = book[0][2]

    return transactions, account


def output_qif(account, transactions):
    print("!Account")
    print("N{}".format(account))
    print("TBank")
    print("^")
    print("!Type:Bank")
    for t in transactions:
        print("D{}".format(t["date"]))
        print("T{}".format(t["amount"]))
        print("M{}".format(t["memo"]))
        print("^")

if __name__ == "__main__":
    argparser = argparse.ArgumentParser()
    argparser.add_argument("-a", "--account", default="")
    argparser.add_argument("-f", "--format",
                           choices=["ica", "nordea", "swedbank"],
                           default="nordea")
    argparser.add_argument("filename", metavar="FILE")
    args = argparser.parse_args()

    parser = None
    if args.format == "ica":
        parser = parse_ica
    elif args.format == "nordea":
        parser = parse_nordea
    elif args.format == "swedbank":
        parser = parse_swedbank

    transactions, account = parser(args.filename)
    if args.account != "":
        account = args.account
    output_qif(account, transactions)
